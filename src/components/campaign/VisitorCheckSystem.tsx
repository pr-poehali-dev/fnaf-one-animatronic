import React, { useState, useEffect } from 'react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import Icon from '@/components/ui/icon';
import { VisitorCheck } from './CampaignData';

interface VisitorCheckSystemProps {
  visitor: VisitorCheck;
  onCheckComplete: (success: boolean, visitorWasHuman: boolean) => void;
  onTimeUp: () => void;
}

export const VisitorCheckSystem: React.FC<VisitorCheckSystemProps> = ({
  visitor,
  onCheckComplete,
  onTimeUp
}) => {
  const [timeLeft, setTimeLeft] = useState(visitor.timeLimit);
  const [currentDialogue, setCurrentDialogue] = useState(0);
  const [checkedMethods, setCheckedMethods] = useState<string[]>([]);
  const [robotDetected, setRobotDetected] = useState(false);
  const [showCheckMethods, setShowCheckMethods] = useState(false);

  useEffect(() => {
    const timer = setInterval(() => {
      setTimeLeft(prev => {
        if (prev <= 1) {
          onTimeUp();
          return 0;
        }
        return prev - 1;
      });
    }, 1000);

    return () => clearInterval(timer);
  }, [onTimeUp]);

  const nextDialogue = () => {
    if (currentDialogue < visitor.dialogue.length - 1) {
      setCurrentDialogue(prev => prev + 1);
    } else {
      setShowCheckMethods(true);
    }
  };

  const performCheck = (methodIndex: number) => {
    const method = visitor.checkMethods[methodIndex];
    setCheckedMethods(prev => [...prev, method.action]);
    
    if (method.revealsIdentity && !visitor.isHuman) {
      setRobotDetected(true);
    }
  };

  const makeDecision = (letIn: boolean) => {
    if (!visitor.isHuman && letIn) {
      // –ü—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Ä–æ–±–æ—Ç–∞ - –ø–ª–æ—Ö–æ
      onCheckComplete(false, false);
    } else if (visitor.isHuman && !letIn) {
      // –ù–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —á–µ–ª–æ–≤–µ–∫–∞ - –ø–ª–æ—Ö–æ  
      onCheckComplete(false, true);
    } else {
      // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ
      onCheckComplete(true, visitor.isHuman);
    }
  };

  const getEyeColorDisplay = () => {
    switch (visitor.appearance.eyeColor) {
      case 'red': return 'üî¥ –ö—Ä–∞—Å–Ω—ã–µ –≥–ª–∞–∑–∞';
      case 'glowing': return '‚ú® –°–≤–µ—Ç—è—â–∏–µ—Å—è –≥–ª–∞–∑–∞';
      default: return 'üëÅÔ∏è –û–±—ã—á–Ω—ã–µ –≥–ª–∞–∑–∞';
    }
  };

  const getMovementDisplay = () => {
    switch (visitor.appearance.movement) {
      case 'robotic': return 'ü§ñ –†–æ–±–æ—Ç–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è';
      case 'jerky': return '‚ö° –î–µ—Ä–≥–∞–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è';
      default: return 'üö∂ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è';
    }
  };

  const getSpeechDisplay = () => {
    switch (visitor.appearance.speech) {
      case 'monotone': return 'üéµ –ú–æ–Ω–æ—Ç–æ–Ω–Ω–∞—è —Ä–µ—á—å';
      case 'glitchy': return 'üìª –ò—Å–∫–∞–∂–µ–Ω–Ω–∞—è —Ä–µ—á—å';
      default: return 'üí¨ –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–µ—á—å';
    }
  };

  return (
    <div className="fixed inset-0 bg-black/80 flex items-center justify-center z-50">
      <Card className="w-full max-w-4xl bg-gradient-to-br from-gray-900 to-gray-800 border-red-500 text-white">
        <CardHeader className="border-b border-red-500/30">
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="text-2xl text-red-400 flex items-center">
                <Icon name="User" className="mr-2" />
                –ü–†–û–í–ï–†–ö–ê –ü–û–°–ï–¢–ò–¢–ï–õ–Ø
              </CardTitle>
              <p className="text-sm text-gray-300">
                –ò–º—è: {visitor.name} | –ü—Ä–∏—á–∏–Ω–∞: {visitor.reason}
              </p>
            </div>
            <div className="text-right">
              <div className={`text-2xl font-bold ${timeLeft <= 10 ? 'text-red-400 animate-pulse' : 'text-blue-400'}`}>
                ‚è±Ô∏è {timeLeft}—Å
              </div>
              <div className="text-xs text-gray-400">–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É</div>
            </div>
          </div>
        </CardHeader>

        <CardContent className="p-6 space-y-6">
          {/* –í–Ω–µ—à–Ω–∏–π –≤–∏–¥ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª—è */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-black/30 rounded border border-gray-600">
            <div className="text-center">
              <div className="text-sm text-gray-400">–ì–ª–∞–∑–∞</div>
              <div className="text-xs">{getEyeColorDisplay()}</div>
            </div>
            <div className="text-center">
              <div className="text-sm text-gray-400">–î–≤–∏–∂–µ–Ω–∏—è</div>
              <div className="text-xs">{getMovementDisplay()}</div>
            </div>
            <div className="text-center">
              <div className="text-sm text-gray-400">–†–µ—á—å</div>
              <div className="text-xs">{getSpeechDisplay()}</div>
            </div>
            <div className="text-center">
              <div className="text-sm text-gray-400">–ö–æ–∂–∞</div>
              <div className="text-xs">
                {visitor.appearance.skin === 'synthetic' ? 'ü§ñ –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–∞—è' : 
                 visitor.appearance.skin === 'pale' ? 'üëª –ë–ª–µ–¥–Ω–∞—è' : 'üë® –û–±—ã—á–Ω–∞—è'}
              </div>
            </div>
          </div>

          {/* –î–∏–∞–ª–æ–≥ */}
          {!showCheckMethods && (
            <div className="space-y-4">
              <div className="bg-blue-900/30 p-4 rounded border border-blue-500/50">
                <div className="text-blue-300 text-sm mb-2">–ü–æ—Å–µ—Ç–∏—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç:</div>
                <div className="text-white text-lg">{visitor.dialogue[currentDialogue]}</div>
              </div>
              
              <div className="flex justify-center">
                <Button 
                  onClick={nextDialogue}
                  className="bg-blue-600 hover:bg-blue-700"
                >
                  {currentDialogue < visitor.dialogue.length - 1 ? '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥' : '–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ'}
                  <Icon name="ArrowRight" className="ml-2" />
                </Button>
              </div>
            </div>
          )}

          {/* –ú–µ—Ç–æ–¥—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ */}
          {showCheckMethods && (
            <div className="space-y-4">
              <div className="text-center text-yellow-400 font-bold text-lg">
                üîç –í–´–ë–ï–†–ò–¢–ï –°–ü–û–°–û–ë –ü–†–û–í–ï–†–ö–ò
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {visitor.checkMethods.map((method, index) => (
                  <Card 
                    key={index}
                    className={`cursor-pointer transition-all hover:scale-105 ${
                      checkedMethods.includes(method.action) 
                        ? 'bg-green-900/30 border-green-500' 
                        : 'bg-gray-800 border-gray-600 hover:border-yellow-500'
                    }`}
                    onClick={() => !checkedMethods.includes(method.action) && performCheck(index)}
                  >
                    <CardContent className="p-4">
                      <div className="flex items-center mb-2">
                        <Icon 
                          name={method.type === 'question' ? 'MessageCircle' : 
                                method.type === 'physical' ? 'Hand' : 'Eye'} 
                          className="mr-2 text-yellow-400" 
                        />
                        <span className="font-bold text-white">{method.action}</span>
                      </div>
                      
                      {checkedMethods.includes(method.action) && (
                        <div className="text-sm text-green-300 bg-black/30 p-2 rounded">
                          –†–µ–∑—É–ª—å—Ç–∞—Ç: {method.response}
                          {method.revealsIdentity && (
                            <div className="text-red-400 font-bold mt-1">
                              ‚ö†Ô∏è –†–û–ë–û–¢ –û–ë–ù–ê–†–£–ñ–ï–ù!
                            </div>
                          )}
                        </div>
                      )}
                    </CardContent>
                  </Card>
                ))}
              </div>

              {robotDetected && (
                <div className="text-center bg-red-900/50 p-4 rounded border border-red-500 animate-pulse">
                  <div className="text-red-400 font-bold text-xl">
                    üö® –ê–ù–ò–ú–ê–¢–†–û–ù–ò–ö –û–ë–ù–ê–†–£–ñ–ï–ù! üö®
                  </div>
                  <div className="text-red-300">–≠—Ç–æ —Ç–æ—á–Ω–æ –Ω–µ —á–µ–ª–æ–≤–µ–∫!</div>
                </div>
              )}

              {/* –†–µ—à–µ–Ω–∏–µ */}
              <div className="flex justify-center space-x-4 pt-4 border-t border-gray-600">
                <Button 
                  onClick={() => makeDecision(false)}
                  className="bg-red-600 hover:bg-red-700 text-white font-bold px-8 py-3"
                  size="lg"
                >
                  <Icon name="X" className="mr-2" />
                  –ù–ï –ü–£–°–ö–ê–¢–¨
                </Button>
                <Button 
                  onClick={() => makeDecision(true)}
                  className="bg-green-600 hover:bg-green-700 text-white font-bold px-8 py-3"
                  size="lg"
                >
                  <Icon name="Check" className="mr-2" />
                  –ü–†–û–ü–£–°–¢–ò–¢–¨
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
};